// This file is autogenerated. Do not modify!
// Generated by https://github.com/pgorzelany/SwiftConfiguration

import Foundation

final class ProjectConfig {

    enum Configuration: String, CaseIterable {
        case Dev = "Dev"
		case Prod = "Prod"
		case Staging = "Staging"
		case Test = "Test"
		
    }

    enum ConfigurationKey: String, CaseIterable {
        case baseURL
		
    }

    // MARK: Shared instance

    static let current = ProjectConfig()

    // MARK: Properties

    private let configurationKey = "ProjectConfig.currentConfiguration"
    private let configurationPlistFileName = "Config.plist"
    private let activeConfigurationDictionary: NSDictionary
    let activeConfiguration: Configuration

    
	var baseURL: String {
		return value(for: .baseURL)
	}



    // MARK: Lifecycle

    init(targetConfiguration: Configuration? = nil) {
        let bundle = Bundle(for: ProjectConfig.self)
        guard let rawConfiguration = bundle.object(forInfoDictionaryKey: configurationKey) as? String,
            let configurationDictionaryPath = bundle.path(forResource: configurationPlistFileName, ofType: nil),
            let activeConfiguration = targetConfiguration ?? Configuration(rawValue: rawConfiguration),
            let configurationDictionary = NSDictionary(contentsOfFile: configurationDictionaryPath),
            let activeEnvironmentDictionary = configurationDictionary[activeConfiguration.rawValue] as? NSDictionary
            else {
                fatalError("Configuration Error")

        }
        self.activeConfiguration = activeConfiguration
        self.activeConfigurationDictionary = activeEnvironmentDictionary
    }

    // MARK: Methods

    func value<T>(for key: ConfigurationKey) -> T {
        guard let value = activeConfigurationDictionary[key.rawValue] as? T else {
            fatalError("No value satysfying requirements")
        }
        return value
    }

    func isRunning(in configuration: Configuration) -> Bool {
        return activeConfiguration == configuration
    }
}